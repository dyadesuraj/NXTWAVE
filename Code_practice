const express = require('express')
const sqlite3 = require('sqlite3')
const {open} = require('sqlite')
const path = require('path')

const app = express()

const dbPath = path.join(__dirname, 'todoApplication.db')
let db = null

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server is running at http://localhost:3000/')
    })
  } catch (e) {
    console.log(`DB erroe: ${e.message}`)
    process.exit(1)
  }
}

initializeDBAndServer()

const changeDBObjectToResponseObject = dbobject => {
  return {
    id: dbobject.id,
    todo: dbobject.todo,
    priority: dbobject.priority,
  }
}

app.get('/todos/?status=TO%20DO', async (request, response) => {
  const {status} = request.query
  const getTodoQuery = `SELECT * FROM todo where 
    status like ${status};`
  const data = await database.all(getTodosQuery)
  response.send(changeDBObjectToResponseObject(data))
})

app.get('/todos/?priority=HIGH', async (request, response) => {
  const {priority} = request.query
  const getTodoQuery = `SELECT * FROM todo where 
    priority like ${High};`
  const data = await database.all(getTodosQuery)
  response.send(changeDBObjectToResponseObject(data))
})

app.get('/todos/?priority=HIGH&status=IN%20PROGRESS', async (request, response) => {
  const {priority, status} = request.query
  const getTodoQuery = `SELECT * FROM todo where 
    priority like '${priority}' and status like '${status}';`
  const data = await database.all(getTodosQuery)
  response.send(changeDBObjectToResponseObject(data))
})

app.get('/todos/?search_q=Play', async(request, response) => {
  const { search_q } = request.query
  const getTodoQuery = `SELECT * FROM todo where 
    search_q like ${search_q}';`
  const data = await database.all(getTodosQuery)
  response.send(changeDBObjectToResponseObject(data))
})

app.get('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const getTodoQuery = `SELECT
  *
  FROM
  todo
  where id = ${todoId};`
  const getTodo = await db.get(getTodoQuery)
  response.send(changeDBObjectToResponseObject(getTodo))
})

app.post('/todos/', async (request, response) => {
  const todoDetails = request.body
  const {id, todo, priority, status} = todoDetails
  const addTodoQuery = `INSERT INTO todo(
    id,
    todo,
    priority,
    status
  ) VALUES (
    ${id},
    '${todo}',
    '${priority}',
    '${status}'
  );`
  response.send(`Todo Successfully Added`)
})

app.put('/todos/:todosId/', async (request, response) => {
  const {todoId} = request.params
  const {status, priority, todo} = request.query
  const getUpdateQuery = null
  if (priority === undefined && status !== undefined && todo === undefined) {
    getUpdateQuery = `UPDATE todo SET status = ${status}
    where id = ${todoId};`
    const data = await db.all(getUpdateQuery)
    response.send(`Status Updated`)
  }
  if (priority !== undefined && status === undefined && todo === undefined) {
    getUpdateQuery = `UPDATE todo SET priority = ${priority}
    where id = ${todoId};`
    const data = await db.all(getUpdateQuery)
    response.send(`Priority updated`)
  }
  if (priority === undefined && status === undefined && todo !== undefined) {
    getUpdateQuery = `UPDATE todo SET todo = ${todo}
    where id = ${todoId};`
    const data = await db.all(getUpdateQuery)
    response.send(`Todo Updated`)
  }
})

app.delete('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const deleteTodoQuery = `DELETE FROM
  todo where id = ${todoId};`
  await db.run(deleteTodoQuery)
  response.send(`Todo Deleted`)
})

module.exports = app
